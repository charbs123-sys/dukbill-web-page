import base64
import fitz  # PyMuPDF
import re
from pathlib import Path

# ---- INPUT ----
# Paste your single Base64 string here (do NOT paste the bytes or a path).
pdf_base64 = ""  # <-- assign your base64 string value at runtime

OUTPUT_PDF = "decoded_output.pdf"

B64_ALPHABET = re.compile(r'^[A-Za-z0-9+/=_\-\s]+$')  # allow urlsafe too

def normalize_b64(s: str) -> str:
    s = s.strip()
    # strip data URL prefix if present
    s = re.sub(r'^data:application/pdf;base64,', '', s, flags=re.IGNORECASE)
    # collapse JSON-escaped newlines
    s = s.replace("\\n", "").replace("\\r", "")
    # remove real whitespace
    s = re.sub(r"\s+", "", s)
    # fix padding (multiple of 4)
    pad = (-len(s)) % 4
    if pad:
        s += "=" * pad
    return s

def try_decode_once(b64: str) -> bytes:
    # strict
    try:
        return base64.b64decode(b64, validate=True)
    except Exception:
        pass
    # urlsafe
    try:
        return base64.urlsafe_b64decode(b64)
    except Exception:
        pass
    # tolerant
    return base64.b64decode(b64)

def looks_like_base64_ascii(b: bytes) -> bool:
    # Is it ASCII and only base64-ish chars?
    try:
        s = b.decode("ascii")
    except UnicodeDecodeError:
        return False
    return bool(B64_ALPHABET.fullmatch(s))

def ensure_pdf_bytes_from_b64(s: str) -> bytes:
    # 1st pass
    first = try_decode_once(normalize_b64(s))
    # If bytes start with %PDF, we’re done
    if first.startswith(b"%PDF"):
        return first
    # If the bytes look like base64 text (e.g., start with 'JVBER…'), decode again
    if looks_like_base64_ascii(first):
        second = try_decode_once(normalize_b64(first.decode("ascii")))
        return second
    return first

def main():
    if not isinstance(pdf_base64, str) or not pdf_base64.strip():
        print("❗ Please set `pdf_base64` to your single Base64 string.")
        return

    pdf_bytes = ensure_pdf_bytes_from_b64(pdf_base64)

    # Quick check
    if not pdf_bytes.startswith(b"%PDF"):
        head = pdf_bytes[:16]
        try:
            head_str = head.decode("latin1", "replace")
        except Exception:
            head_str = repr(head)
        print("⚠️ After decoding, content still doesn't start with %PDF.")
        print(f"   First 16 bytes: {head_str!r}")
        print("   This likely isn't a PDF, or the Base64 is corrupted/truncated.")
        # Still write what we got for inspection
        Path(OUTPUT_PDF).write_bytes(pdf_bytes)
        return

    # Save and validate with PyMuPDF
    out = Path(OUTPUT_PDF)
    out.write_bytes(pdf_bytes)
    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        doc.save(out.as_posix())
        doc.close()
        print(f"✅ PDF successfully saved as '{out}'")
    except Exception as e:
        print(f"❌ PyMuPDF could not open the decoded bytes as PDF: {e}")
        print("   The file was still written; inspect it to verify the type.")

if __name__ == "__main__":
    main()
